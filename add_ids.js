const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É JSON
const inputPath = path.join(__dirname, 'assets', 'DB', 'tests_uk', 'tests_uk.json');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É-–≤—ã—Ö–æ–¥—É
const outputPath = path.join(__dirname, 'assets', 'DB', 'tests_uk', 'tests_uk_with_ids.json');

// –ß—Ç–µ–Ω–∏–µ JSON
fs.readFile(inputPath, 'utf8', (err, data) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
    return;
  }

  let json;
  try {
    json = JSON.parse(data);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
    return;
  }

  const chapters = json.chapters;

  if (!chapters || typeof chapters !== 'object') {
    console.error('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥–ª–∞–≤—ã –≤ JSON.');
    return;
  }

  for (const [chapterKey, chapter] of Object.entries(chapters)) {
    const questionsObj = chapter.questions;

    if (!questionsObj || typeof questionsObj !== 'object') {
      console.log(`‚ö†Ô∏è –í –≥–ª–∞–≤–µ ${chapterKey} –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.`);
      continue;
    }

    for (const [questionKey, questionData] of Object.entries(questionsObj)) {
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
      for (const locale of ['en', 'uk', 'ru', 'es']) {
        if (questionData[locale] && typeof questionData[locale] === 'object') {
          questionData[locale]['id'] = questionKey;
        }
      }
    }
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
  fs.writeFile(outputPath, JSON.stringify(json, null, 2), 'utf8', err => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
    } else {
      console.log('‚úÖ ID —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!');
      console.log('üëâ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å—é–¥–∞:', outputPath);
    }
  });
});
